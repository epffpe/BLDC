
bldc_sensorless_dbg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  000006aa  0000071e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000fc  00000746  000007ba  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ea  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000050e  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000230  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000602  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029c  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	39 c2       	rjmp	.+1138   	; 0x47e <__vector_5>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	e5 c2       	rjmp	.+1482   	; 0x5e8 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 3f       	cpi	r26, 0xFC	; 252
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	ac ef       	ldi	r26, 0xFC	; 252
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 30       	cpi	r26, 0x02	; 2
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	25 c3       	rjmp	.+1610   	; 0x6a6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <main>:
//_____ M A C R O S ________________________________________________________

//_____ D E F I N I T I O N S ______________________________________________

int main(void)
{ 
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62

  // Init hardware
  mc_init_HW();
  66:	f3 d1       	rcall	.+998    	; 0x44e <mc_init_HW>
    
  // Run Ramp Up sequence
  mc_start_motor();
  68:	4e d0       	rcall	.+156    	; 0x106 <mc_start_motor>

  // Enable interrupts. The rest will now be handled by the ADC interrupts.
  Enable_interrupt();
  6a:	78 94       	sei
   
  for (;;) {
   mc_regulation_loop();
  6c:	6f d1       	rcall	.+734    	; 0x34c <mc_regulation_loop>
  6e:	fe cf       	rjmp	.-4      	; 0x6c <main+0xe>

00000070 <delay_us>:
{2000,1900,1800,1600,1400,1200,1000,800,600,550,500,480,460,440,420,400,380,360,355,350,345,340,335,330,325,320,315,310,305,300};

//! This function generates a delay used during startup
//!
void delay_us(volatile long delay)
{
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	28 97       	sbiw	r28, 0x08	; 8
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	f8 94       	cli
  7e:	de bf       	out	0x3e, r29	; 62
  80:	0f be       	out	0x3f, r0	; 63
  82:	cd bf       	out	0x3d, r28	; 61
  84:	6d 83       	std	Y+5, r22	; 0x05
  86:	7e 83       	std	Y+6, r23	; 0x06
  88:	8f 83       	std	Y+7, r24	; 0x07
  8a:	98 87       	std	Y+8, r25	; 0x08
  for (volatile long i=0;i<delay;i++);  
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	1b 82       	std	Y+3, r1	; 0x03
  92:	1c 82       	std	Y+4, r1	; 0x04
  94:	0b c0       	rjmp	.+22     	; 0xac <delay_us+0x3c>
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	ab 81       	ldd	r26, Y+3	; 0x03
  9c:	bc 81       	ldd	r27, Y+4	; 0x04
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	a1 1d       	adc	r26, r1
  a2:	b1 1d       	adc	r27, r1
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	ab 83       	std	Y+3, r26	; 0x03
  aa:	bc 83       	std	Y+4, r27	; 0x04
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	3a 81       	ldd	r19, Y+2	; 0x02
  b0:	4b 81       	ldd	r20, Y+3	; 0x03
  b2:	5c 81       	ldd	r21, Y+4	; 0x04
  b4:	8d 81       	ldd	r24, Y+5	; 0x05
  b6:	9e 81       	ldd	r25, Y+6	; 0x06
  b8:	af 81       	ldd	r26, Y+7	; 0x07
  ba:	b8 85       	ldd	r27, Y+8	; 0x08
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	4a 07       	cpc	r20, r26
  c2:	5b 07       	cpc	r21, r27
  c4:	44 f3       	brlt	.-48     	; 0x96 <delay_us+0x26>
}
  c6:	28 96       	adiw	r28, 0x08	; 8
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <mc_set_duty_cycle>:

//! This function set duty cycle.
//!
void mc_set_duty_cycle(U16 duty)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <mc_set_duty_cycle+0x6>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
  TC1_WRITE_10_BIT_REGISTER(OCR1A, duty);
  e6:	e5 e4       	ldi	r30, 0x45	; 69
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	89 2f       	mov	r24, r25
  f0:	99 27       	eor	r25, r25
  f2:	80 83       	st	Z, r24
  f4:	ed e4       	ldi	r30, 0x4D	; 77
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	80 83       	st	Z, r24
}
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <mc_start_motor>:
 *
 *  This function locks the motor into a known position and fires off a
 *  commutation sequence controlled by the Timer/counter1 overflow interrupt.
 */
void mc_start_motor()
{
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	00 d0       	rcall	.+0      	; 0x10c <mc_start_motor+0x6>
 10c:	00 d0       	rcall	.+0      	; 0x10e <mc_start_motor+0x8>
 10e:	0f 92       	push	r0
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
  U8 i = 0;
 114:	1b 82       	std	Y+3, r1	; 0x03
  U8 j = 0;
 116:	1a 82       	std	Y+2, r1	; 0x02
  U8 end_of_start = 0;
 118:	19 82       	std	Y+1, r1	; 0x01
  mc_set_duty_cycle(STARTUP_PWM_COMPARE_VALUE) ;
 11a:	8c e8       	ldi	r24, 0x8C	; 140
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	dc df       	rcall	.-72     	; 0xd8 <mc_set_duty_cycle>
  
  nextCommutationStep = 0;
 120:	10 92 fd 00 	sts	0x00FD, r1
 124:	e6 c0       	rjmp	.+460    	; 0x2f2 <__stack+0x93>

  while(end_of_start!=1)
  {
    switch(nextCommutationStep)
 126:	80 91 fd 00 	lds	r24, 0x00FD
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	3d 83       	std	Y+5, r19	; 0x05
 130:	2c 83       	std	Y+4, r18	; 0x04
 132:	8c 81       	ldd	r24, Y+4	; 0x04
 134:	9d 81       	ldd	r25, Y+5	; 0x05
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	91 05       	cpc	r25, r1
 13a:	09 f4       	brne	.+2      	; 0x13e <mc_start_motor+0x38>
 13c:	6f c0       	rjmp	.+222    	; 0x21c <mc_start_motor+0x116>
 13e:	2c 81       	ldd	r18, Y+4	; 0x04
 140:	3d 81       	ldd	r19, Y+5	; 0x05
 142:	23 30       	cpi	r18, 0x03	; 3
 144:	31 05       	cpc	r19, r1
 146:	5c f4       	brge	.+22     	; 0x15e <mc_start_motor+0x58>
 148:	8c 81       	ldd	r24, Y+4	; 0x04
 14a:	9d 81       	ldd	r25, Y+5	; 0x05
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	d1 f0       	breq	.+52     	; 0x184 <mc_start_motor+0x7e>
 150:	2c 81       	ldd	r18, Y+4	; 0x04
 152:	3d 81       	ldd	r19, Y+5	; 0x05
 154:	21 30       	cpi	r18, 0x01	; 1
 156:	31 05       	cpc	r19, r1
 158:	09 f4       	brne	.+2      	; 0x15c <mc_start_motor+0x56>
 15a:	46 c0       	rjmp	.+140    	; 0x1e8 <mc_start_motor+0xe2>
 15c:	c6 c0       	rjmp	.+396    	; 0x2ea <__stack+0x8b>
 15e:	8c 81       	ldd	r24, Y+4	; 0x04
 160:	9d 81       	ldd	r25, Y+5	; 0x05
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	91 05       	cpc	r25, r1
 166:	09 f4       	brne	.+2      	; 0x16a <mc_start_motor+0x64>
 168:	8d c0       	rjmp	.+282    	; 0x284 <__stack+0x25>
 16a:	2c 81       	ldd	r18, Y+4	; 0x04
 16c:	3d 81       	ldd	r19, Y+5	; 0x05
 16e:	24 30       	cpi	r18, 0x04	; 4
 170:	31 05       	cpc	r19, r1
 172:	0c f4       	brge	.+2      	; 0x176 <mc_start_motor+0x70>
 174:	6d c0       	rjmp	.+218    	; 0x250 <mc_start_motor+0x14a>
 176:	8c 81       	ldd	r24, Y+4	; 0x04
 178:	9d 81       	ldd	r25, Y+5	; 0x05
 17a:	85 30       	cpi	r24, 0x05	; 5
 17c:	91 05       	cpc	r25, r1
 17e:	09 f4       	brne	.+2      	; 0x182 <mc_start_motor+0x7c>
 180:	9b c0       	rjmp	.+310    	; 0x2b8 <__stack+0x59>
 182:	b3 c0       	rjmp	.+358    	; 0x2ea <__stack+0x8b>
    {
      case 0:       
#if (DIRECTION_OF_ROTATION == CCW) 
        TCCR1E = commTableReverse[0];
#else
        TCCR1E = commTableForward[0];
 184:	e0 e2       	ldi	r30, 0x20	; 32
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 91 e4 00 	lds	r24, 0x00E4
 18c:	80 83       	st	Z, r24
#endif        
        if (i < 2) i += 1; 
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	18 f4       	brcc	.+6      	; 0x19a <mc_start_motor+0x94>
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	8b 83       	std	Y+3, r24	; 0x03
        if ((i == 2)&&(j<STARTUP_NUM_COMMUTATIONS)) { 
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	39 f4       	brne	.+14     	; 0x1ae <mc_start_motor+0xa8>
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	8d 31       	cpi	r24, 0x1D	; 29
 1a4:	20 f4       	brcc	.+8      	; 0x1ae <mc_start_motor+0xa8>
           j += 1;i=0;
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	8a 83       	std	Y+2, r24	; 0x02
 1ac:	1b 82       	std	Y+3, r1	; 0x03
        }
       if ((i==2)&&(j==STARTUP_NUM_COMMUTATIONS)){
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	29 f4       	brne	.+10     	; 0x1be <mc_start_motor+0xb8>
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	8d 31       	cpi	r24, 0x1D	; 29
 1b8:	11 f4       	brne	.+4      	; 0x1be <mc_start_motor+0xb8>
          end_of_start = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	89 83       	std	Y+1, r24	; 0x01
        } 
        delay_us(start_delay[j]);  
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	88 2f       	mov	r24, r24
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	fc 01       	movw	r30, r24
 1ce:	e0 5a       	subi	r30, 0xA0	; 160
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	a2 81       	ldd	r26, Z+2	; 0x02
 1d8:	b3 81       	ldd	r27, Z+3	; 0x03
 1da:	bc 01       	movw	r22, r24
 1dc:	cd 01       	movw	r24, r26
 1de:	48 df       	rcall	.-368    	; 0x70 <delay_us>
        nextCommutationStep = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 fd 00 	sts	0x00FD, r24
 1e6:	85 c0       	rjmp	.+266    	; 0x2f2 <__stack+0x93>
        break;
      case 1: 
#if (DIRECTION_OF_ROTATION == CCW)      
        TCCR1E = commTableReverse[1];
#else
        TCCR1E = commTableForward[1];
 1e8:	e0 e2       	ldi	r30, 0x20	; 32
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 91 e5 00 	lds	r24, 0x00E5
 1f0:	80 83       	st	Z, r24
#endif
        delay_us(start_delay[j]);  
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	fc 01       	movw	r30, r24
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	91 81       	ldd	r25, Z+1	; 0x01
 20a:	a2 81       	ldd	r26, Z+2	; 0x02
 20c:	b3 81       	ldd	r27, Z+3	; 0x03
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	2e df       	rcall	.-420    	; 0x70 <delay_us>
        nextCommutationStep = 2;            
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 fd 00 	sts	0x00FD, r24
 21a:	6b c0       	rjmp	.+214    	; 0x2f2 <__stack+0x93>
        break;
      case 2:   
#if (DIRECTION_OF_ROTATION == CCW)      
        TCCR1E = commTableReverse[2];
#else
        TCCR1E = commTableForward[2];
 21c:	e0 e2       	ldi	r30, 0x20	; 32
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 91 e6 00 	lds	r24, 0x00E6
 224:	80 83       	st	Z, r24
#endif        
        delay_us(start_delay[j]);  
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	fc 01       	movw	r30, r24
 236:	e0 5a       	subi	r30, 0xA0	; 160
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	80 81       	ld	r24, Z
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	a2 81       	ldd	r26, Z+2	; 0x02
 240:	b3 81       	ldd	r27, Z+3	; 0x03
 242:	bc 01       	movw	r22, r24
 244:	cd 01       	movw	r24, r26
 246:	14 df       	rcall	.-472    	; 0x70 <delay_us>
        nextCommutationStep = 3;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	80 93 fd 00 	sts	0x00FD, r24
 24e:	51 c0       	rjmp	.+162    	; 0x2f2 <__stack+0x93>
        break;
      case 3:
#if (DIRECTION_OF_ROTATION == CCW)      
        TCCR1E = commTableReverse[3];
#else
        TCCR1E = commTableForward[3];
 250:	e0 e2       	ldi	r30, 0x20	; 32
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 91 e7 00 	lds	r24, 0x00E7
 258:	80 83       	st	Z, r24
#endif        
        delay_us(start_delay[j]);  
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	fc 01       	movw	r30, r24
 26a:	e0 5a       	subi	r30, 0xA0	; 160
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	a2 81       	ldd	r26, Z+2	; 0x02
 274:	b3 81       	ldd	r27, Z+3	; 0x03
 276:	bc 01       	movw	r22, r24
 278:	cd 01       	movw	r24, r26
 27a:	fa de       	rcall	.-524    	; 0x70 <delay_us>
        nextCommutationStep = 4;           
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 93 fd 00 	sts	0x00FD, r24
 282:	37 c0       	rjmp	.+110    	; 0x2f2 <__stack+0x93>
        break;
      case 4:       
#if (DIRECTION_OF_ROTATION == CCW)      
        TCCR1E = commTableReverse[4];
#else
        TCCR1E = commTableForward[4];
 284:	e0 e2       	ldi	r30, 0x20	; 32
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 91 e8 00 	lds	r24, 0x00E8
 28c:	80 83       	st	Z, r24
#endif        
        delay_us(start_delay[j]);  
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	88 2f       	mov	r24, r24
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	fc 01       	movw	r30, r24
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	80 81       	ld	r24, Z
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	a2 81       	ldd	r26, Z+2	; 0x02
 2a8:	b3 81       	ldd	r27, Z+3	; 0x03
 2aa:	bc 01       	movw	r22, r24
 2ac:	cd 01       	movw	r24, r26
 2ae:	e0 de       	rcall	.-576    	; 0x70 <delay_us>
        nextCommutationStep = 5;          
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	80 93 fd 00 	sts	0x00FD, r24
 2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <__stack+0x93>
        break;
      case 5:  
#if (DIRECTION_OF_ROTATION == CCW)      
        TCCR1E = commTableReverse[5];
#else
        TCCR1E = commTableForward[5];
 2b8:	e0 e2       	ldi	r30, 0x20	; 32
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 91 e9 00 	lds	r24, 0x00E9
 2c0:	80 83       	st	Z, r24
#endif        
        delay_us(start_delay[j]);  
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	88 2f       	mov	r24, r24
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	fc 01       	movw	r30, r24
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	a2 81       	ldd	r26, Z+2	; 0x02
 2dc:	b3 81       	ldd	r27, Z+3	; 0x03
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	c6 de       	rcall	.-628    	; 0x70 <delay_us>
        nextCommutationStep = 0;            
 2e4:	10 92 fd 00 	sts	0x00FD, r1
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <__stack+0x93>
        break;
    default :
      nextCommutationStep = nextCommutationStep;
 2ea:	80 91 fd 00 	lds	r24, 0x00FD
 2ee:	80 93 fd 00 	sts	0x00FD, r24
  U8 end_of_start = 0;
  mc_set_duty_cycle(STARTUP_PWM_COMPARE_VALUE) ;
  
  nextCommutationStep = 0;

  while(end_of_start!=1)
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <__stack+0x9b>
 2f8:	16 cf       	rjmp	.-468    	; 0x126 <mc_start_motor+0x20>
      break;
    }
  }

  //nextCommutationStep++;
  nextCommutationStep = 0;
 2fa:	10 92 fd 00 	sts	0x00FD, r1
  // Use LSB of nextCommutationStep to determine zero crossing polarity.  
#if (DIRECTION_OF_ROTATION == CCW)  
  zcPolarity = zcTableReverse[nextCommutationStep];
  ADMUX = ADMUXTableReverse[nextCommutationStep];
#else
  zcPolarity = zcTableForward[nextCommutationStep];
 2fe:	80 91 fd 00 	lds	r24, 0x00FD
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	e0 51       	subi	r30, 0x10	; 16
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	80 81       	ld	r24, Z
 30e:	80 93 01 01 	sts	0x0101, r24
  ADMUX = ADMUXTableForward[nextCommutationStep];
 312:	a7 e2       	ldi	r26, 0x27	; 39
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	80 91 fd 00 	lds	r24, 0x00FD
 31a:	88 2f       	mov	r24, r24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	e8 52       	subi	r30, 0x28	; 40
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	8c 93       	st	X, r24
#endif 
  // Switch to sensorless commutation.
  TC0_WRITE_TCNT0(0);
 328:	e4 e3       	ldi	r30, 0x34	; 52
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	10 82       	st	Z, r1
 32e:	e2 e5       	ldi	r30, 0x52	; 82
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 82       	st	Z, r1

  // Enable Timer 1 Interrupt
  SET_TIMER1_INT_ZC_DETECTION;
 334:	e9 e5       	ldi	r30, 0x59	; 89
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	80 83       	st	Z, r24

}
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	08 95       	ret

0000034c <mc_regulation_loop>:

//! This function launches speed control or no regulation
//!
void mc_regulation_loop()
{
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
  // Only update duty cycle if a new speed reference measurement has been made. (Done right after speed measurement is ready)
  if (speedUpdated)
 354:	80 91 fc 00 	lds	r24, 0x00FC
 358:	88 23       	and	r24, r24
 35a:	79 f0       	breq	.+30     	; 0x37a <mc_regulation_loop+0x2e>
  {
    speedUpdated = FALSE;
 35c:	10 92 fc 00 	sts	0x00FC, r1
    // Calculate duty cycle from speed reference value.
    mc_set_duty_cycle(MIN_PWM_COMPARE_VALUE+(speedReferenceADC>>3));
 360:	80 91 ff 00 	lds	r24, 0x00FF
 364:	90 91 00 01 	lds	r25, 0x0100
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	80 56       	subi	r24, 0x60	; 96
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	af de       	rcall	.-674    	; 0xd8 <mc_set_duty_cycle>
  }
}
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <Timer0Init>:

//! Flag that specifies whether a new external speed reference and a motor speed measurement is available.
volatile U8 speedUpdated = FALSE;

void Timer0Init(void)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
  // Set up Timer/counter0 for commutation timing, prescaler = 8.
  TCCR0B = ((0<<CS02)|(1<<CS01) |(0<<CS00)); 
 388:	e3 e5       	ldi	r30, 0x53	; 83
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 83       	st	Z, r24
}
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	08 95       	ret

00000396 <PLLInit>:

void PLLInit(void)
{
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
  //Enable fast peripheral clock (64MHz for Timer1).
  PLLCSR = (1 << PCKE);
 39e:	e9 e4       	ldi	r30, 0x49	; 73
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	80 83       	st	Z, r24
}
 3a6:	cf 91       	pop	r28
 3a8:	df 91       	pop	r29
 3aa:	08 95       	ret

000003ac <PWMInit>:


void PWMInit(void)
{
 3ac:	df 93       	push	r29
 3ae:	cf 93       	push	r28
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 
  //Clear on up-counting.
  TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << PWM1A);
 3b4:	e0 e5       	ldi	r30, 0x50	; 80
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	82 e8       	ldi	r24, 0x82	; 130
 3ba:	80 83       	st	Z, r24

  //Set WGM to PWM6, dual slope mode.
  TCCR1D = (1 << WGM11) | (1 << WGM10);
 3bc:	e6 e4       	ldi	r30, 0x46	; 70
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	80 83       	st	Z, r24

  //Set top value.
  TC1_WRITE_10_BIT_REGISTER(OCR1C, PWM_TOP_VALUE);
 3c4:	e5 e4       	ldi	r30, 0x45	; 69
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	10 82       	st	Z, r1
 3ca:	eb e4       	ldi	r30, 0x4B	; 75
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	80 83       	st	Z, r24

  //Run timer at full speed.
  TCCR1B = (1 << CS10);
 3d2:	ef e4       	ldi	r30, 0x4F	; 79
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 83       	st	Z, r24
  
}
 3da:	cf 91       	pop	r28
 3dc:	df 91       	pop	r29
 3de:	08 95       	ret

000003e0 <ADCInit>:


void ADCInit(void)
{
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
  ADMUX = ADMUX_REF_VOLTAGE ;
 3e8:	e7 e2       	ldi	r30, 0x27	; 39
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	82 e4       	ldi	r24, 0x42	; 66
 3ee:	80 83       	st	Z, r24
  
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADIF) | (ADC_PRESCALER_16);
 3f0:	e6 e2       	ldi	r30, 0x26	; 38
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	84 ed       	ldi	r24, 0xD4	; 212
 3f6:	80 83       	st	Z, r24
  while (ADCSRA & (1 << ADSC))
 3f8:	e6 e2       	ldi	r30, 0x26	; 38
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	80 74       	andi	r24, 0x40	; 64
 404:	90 70       	andi	r25, 0x00	; 0
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	b9 f7       	brne	.-18     	; 0x3f8 <ADCInit+0x18>
  {

  }
  speedReferenceADC = ADC;
 40a:	e4 e2       	ldi	r30, 0x24	; 36
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	90 93 00 01 	sts	0x0100, r25
 416:	80 93 ff 00 	sts	0x00FF, r24

  // Initialize the ADC for autotriggered operation on PWM timer overflow.
  ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (1 << ADIF) | (0 << ADIE) | ADC_PRESCALER_16;
 41a:	e6 e2       	ldi	r30, 0x26	; 38
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	84 eb       	ldi	r24, 0xB4	; 180
 420:	80 83       	st	Z, r24
  ADCSRB = ADC_TRIGGER_SOURCE;
 422:	e3 e2       	ldi	r30, 0x23	; 35
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	80 83       	st	Z, r24
}
 42a:	cf 91       	pop	r28
 42c:	df 91       	pop	r29
 42e:	08 95       	ret

00000430 <PortsInit>:


void PortsInit(void)
{
 430:	df 93       	push	r29
 432:	cf 93       	push	r28
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
  //Set PWM pins as output. (PWM output is still controlled through TCCR1E register.)
  DDRB = (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5)| (1 << PB6) ;
 438:	e7 e3       	ldi	r30, 0x37	; 55
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	8f e7       	ldi	r24, 0x7F	; 127
 43e:	80 83       	st	Z, r24

  // Disable digital input buffers on ADC channels.
  DIDR0 = (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D) | (1 << ADC4D) ;
 440:	e1 e2       	ldi	r30, 0x21	; 33
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	86 e3       	ldi	r24, 0x36	; 54
 446:	80 83       	st	Z, r24
}
 448:	cf 91       	pop	r28
 44a:	df 91       	pop	r29
 44c:	08 95       	ret

0000044e <mc_init_HW>:

//! This function initializes the hardware/software resources required for motor driver
//!
void mc_init_HW(void)
{
 44e:	df 93       	push	r29
 450:	cf 93       	push	r28
 452:	0f 92       	push	r0
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
  Clear_prescaler();
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	29 81       	ldd	r18, Y+1	; 0x01
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	28 bd       	out	0x28, r18	; 40
 468:	88 bd       	out	0x28, r24	; 40
 46a:	0f be       	out	0x3f, r0	; 63
  PLLInit();
 46c:	94 df       	rcall	.-216    	; 0x396 <PLLInit>
  PWMInit();
 46e:	9e df       	rcall	.-196    	; 0x3ac <PWMInit>
  ADCInit();
 470:	b7 df       	rcall	.-146    	; 0x3e0 <ADCInit>

  // Initialize timer0 for commutation timing
  Timer0Init();
 472:	86 df       	rcall	.-244    	; 0x380 <Timer0Init>
  
  // Initialize alternate function
  PortsInit();
 474:	dd df       	rcall	.-70     	; 0x430 <PortsInit>

}
 476:	0f 90       	pop	r0
 478:	cf 91       	pop	r28
 47a:	df 91       	pop	r29
 47c:	08 95       	ret

0000047e <__vector_5>:
  ISR(TIMER1_OVF_vect)
#else
#pragma vector = TIM1_OVF_vect
__interrupt void MotorPWMBottom()
#endif
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	00 d0       	rcall	.+0      	; 0x49e <__vector_5+0x20>
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <__vector_5+0x22>
 4a0:	0f 92       	push	r0
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62

  U16 temp;

  CLEAR_ALL_TIMER1_INT_FLAGS;
 4a6:	a8 e5       	ldi	r26, 0x58	; 88
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	e8 e5       	ldi	r30, 0x58	; 88
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	84 6e       	ori	r24, 0xE4	; 228
 4b2:	8c 93       	st	X, r24


  ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADIF) | (ADC_PRESCALER_16);
 4b4:	e6 e2       	ldi	r30, 0x26	; 38
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	84 ed       	ldi	r24, 0xD4	; 212
 4ba:	80 83       	st	Z, r24
  while (ADCSRA & (1 << ADSC))
 4bc:	e6 e2       	ldi	r30, 0x26	; 38
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	80 74       	andi	r24, 0x40	; 64
 4c8:	90 70       	andi	r25, 0x00	; 0
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	b9 f7       	brne	.-18     	; 0x4bc <__vector_5+0x3e>
  {
  }
  temp= ADC;
 4ce:	e4 e2       	ldi	r30, 0x24	; 36
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	9d 83       	std	Y+5, r25	; 0x05
 4d8:	8c 83       	std	Y+4, r24	; 0x04

  if (((zcPolarity == EDGE_RISING) && (temp > ADC_ZC_THRESHOLD)) || ((zcPolarity == EDGE_FALLING) && (temp < ADC_ZC_THRESHOLD)))
 4da:	80 91 01 01 	lds	r24, 0x0101
 4de:	88 23       	and	r24, r24
 4e0:	31 f4       	brne	.+12     	; 0x4ee <__vector_5+0x70>
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	9d 81       	ldd	r25, Y+5	; 0x05
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	84 37       	cpi	r24, 0x74	; 116
 4ea:	92 07       	cpc	r25, r18
 4ec:	60 f4       	brcc	.+24     	; 0x506 <__vector_5+0x88>
 4ee:	80 91 01 01 	lds	r24, 0x0101
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <__vector_5+0x7a>
 4f6:	64 c0       	rjmp	.+200    	; 0x5c0 <__vector_5+0x142>
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	9d 81       	ldd	r25, Y+5	; 0x05
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	83 37       	cpi	r24, 0x73	; 115
 500:	92 07       	cpc	r25, r18
 502:	08 f0       	brcs	.+2      	; 0x506 <__vector_5+0x88>
 504:	5d c0       	rjmp	.+186    	; 0x5c0 <__vector_5+0x142>
  {
    U16 timeSinceCommutation;

    // Find time since last commutation
    TC0_READ_TCNT0(timeSinceCommutation);
 506:	e2 e5       	ldi	r30, 0x52	; 82
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	89 83       	std	Y+1, r24	; 0x01
 50e:	e4 e3       	ldi	r30, 0x34	; 52
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	38 2f       	mov	r19, r24
 51a:	22 27       	eor	r18, r18
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	82 2b       	or	r24, r18
 524:	93 2b       	or	r25, r19
 526:	9b 83       	std	Y+3, r25	; 0x03
 528:	8a 83       	std	Y+2, r24	; 0x02
	
    // Reset Timer before setting the next Commutation Period
    TC0_WRITE_TCNT0(0);
 52a:	e4 e3       	ldi	r30, 0x34	; 52
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	10 82       	st	Z, r1
 530:	e2 e5       	ldi	r30, 0x52	; 82
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	10 82       	st	Z, r1

    OCR0A = timeSinceCommutation;
 536:	e3 e3       	ldi	r30, 0x33	; 51
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	80 83       	st	Z, r24

    speedUpdated = TRUE;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 fc 00 	sts	0x00FC, r24

    SET_TIMER0_INT_COMMUTATION;
 544:	e9 e5       	ldi	r30, 0x59	; 89
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 e1       	ldi	r24, 0x10	; 16
 54a:	80 83       	st	Z, r24
    CLEAR_ALL_TIMER0_INT_FLAGS;
 54c:	a8 e5       	ldi	r26, 0x58	; 88
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	e8 e5       	ldi	r30, 0x58	; 88
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	8b 61       	ori	r24, 0x1B	; 27
 558:	8c 93       	st	X, r24

    // Disable Timer/Counter1 overflow ISR.
    DISABLE_ALL_TIMER1_INTS;
 55a:	a9 e5       	ldi	r26, 0x59	; 89
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e9 e5       	ldi	r30, 0x59	; 89
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	8b 71       	andi	r24, 0x1B	; 27
 566:	8c 93       	st	X, r24

    // Read speed reference.

    // Make sure that a sample is not in progress.
    while (ADCSRA & (1 << ADSC))
 568:	e6 e2       	ldi	r30, 0x26	; 38
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	88 2f       	mov	r24, r24
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	80 74       	andi	r24, 0x40	; 64
 574:	90 70       	andi	r25, 0x00	; 0
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	b9 f7       	brne	.-18     	; 0x568 <__vector_5+0xea>
    {

    }
    // Change channel
    ADMUX = ADMUX_SPEED_REF;
 57a:	e7 e2       	ldi	r30, 0x27	; 39
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	82 e4       	ldi	r24, 0x42	; 66
 580:	80 83       	st	Z, r24

    // Start conversion manually.
    ADCSRA |= (1 << ADSC);
 582:	a6 e2       	ldi	r26, 0x26	; 38
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e6 e2       	ldi	r30, 0x26	; 38
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	80 64       	ori	r24, 0x40	; 64
 58e:	8c 93       	st	X, r24

    // Wait for conversion to complete.
    while((ADCSRA & (1 << ADSC)))
 590:	e6 e2       	ldi	r30, 0x26	; 38
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	80 74       	andi	r24, 0x40	; 64
 59c:	90 70       	andi	r25, 0x00	; 0
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	b9 f7       	brne	.-18     	; 0x590 <__vector_5+0x112>
    {

    }
    speedReferenceADC = ADC;
 5a2:	e4 e2       	ldi	r30, 0x24	; 36
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	91 81       	ldd	r25, Z+1	; 0x01
 5aa:	90 93 00 01 	sts	0x0100, r25
 5ae:	80 93 ff 00 	sts	0x00FF, r24

    ADCSRA |= (1 << ADATE) | (0 << ADIE) | ADC_PRESCALER;
 5b2:	a6 e2       	ldi	r26, 0x26	; 38
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	e6 e2       	ldi	r30, 0x26	; 38
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	83 62       	ori	r24, 0x23	; 35
 5be:	8c 93       	st	X, r24
  }

}
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_14>:
  ISR(TIMER0_COMPA_vect)
#else
#pragma vector = TIM0_COMPA_vect
__interrupt void Commutate()
#endif
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
  CLEAR_ALL_TIMER0_INT_FLAGS;
 606:	a8 e5       	ldi	r26, 0x58	; 88
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e8 e5       	ldi	r30, 0x58	; 88
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	8b 61       	ori	r24, 0x1B	; 27
 612:	8c 93       	st	X, r24
#if (DIRECTION_OF_ROTATION == CCW)
  // Commutate and clear commutation timer.
  TCCR1E = commTableReverse[nextCommutationStep];
#else
  // Commutate and clear commutation timer.
  TCCR1E = commTableForward[nextCommutationStep];
 614:	a0 e2       	ldi	r26, 0x20	; 32
 616:	b0 e0       	ldi	r27, 0x00	; 0
 618:	80 91 fd 00 	lds	r24, 0x00FD
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fc 01       	movw	r30, r24
 622:	ec 51       	subi	r30, 0x1C	; 28
 624:	ff 4f       	sbci	r31, 0xFF	; 255
 626:	80 81       	ld	r24, Z
 628:	8c 93       	st	X, r24
#endif


  TC0_WRITE_TCNT0(0);
 62a:	e4 e3       	ldi	r30, 0x34	; 52
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	10 82       	st	Z, r1
 630:	e2 e5       	ldi	r30, 0x52	; 82
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	10 82       	st	Z, r1

#if (DIRECTION_OF_ROTATION == CCW)  
  zcPolarity = zcTableReverse[nextCommutationStep];
  ADMUX = ADMUXTableReverse[nextCommutationStep];
#else
  zcPolarity = zcTableForward[nextCommutationStep];
 636:	80 91 fd 00 	lds	r24, 0x00FD
 63a:	88 2f       	mov	r24, r24
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	fc 01       	movw	r30, r24
 640:	e0 51       	subi	r30, 0x10	; 16
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	80 81       	ld	r24, Z
 646:	80 93 01 01 	sts	0x0101, r24
  ADMUX = ADMUXTableForward[nextCommutationStep];
 64a:	a7 e2       	ldi	r26, 0x27	; 39
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	80 91 fd 00 	lds	r24, 0x00FD
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	fc 01       	movw	r30, r24
 658:	e8 52       	subi	r30, 0x28	; 40
 65a:	ff 4f       	sbci	r31, 0xFF	; 255
 65c:	80 81       	ld	r24, Z
 65e:	8c 93       	st	X, r24
#endif

  nextCommutationStep ++;
 660:	80 91 fd 00 	lds	r24, 0x00FD
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	80 93 fd 00 	sts	0x00FD, r24

  if (nextCommutationStep > 5)
 66a:	80 91 fd 00 	lds	r24, 0x00FD
 66e:	86 30       	cpi	r24, 0x06	; 6
 670:	10 f0       	brcs	.+4      	; 0x676 <__vector_14+0x8e>
  {
    nextCommutationStep = 0;
 672:	10 92 fd 00 	sts	0x00FD, r1
  }

  DISABLE_ALL_TIMER0_INTS;
 676:	a9 e5       	ldi	r26, 0x59	; 89
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e9 e5       	ldi	r30, 0x59	; 89
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	84 7e       	andi	r24, 0xE4	; 228
 682:	8c 93       	st	X, r24
  SET_TIMER1_INT_ZC_DETECTION;
 684:	e9 e5       	ldi	r30, 0x59	; 89
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	80 83       	st	Z, r24

}
 68c:	cf 91       	pop	r28
 68e:	df 91       	pop	r29
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
